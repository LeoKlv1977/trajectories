diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index ceb792a..e529abb 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -1,3 +1,3 @@
 # collect up the source files
-set(SRC_FILES serialize.cpp serialize.h trajectory.cpp trajectory.h)
+set(SRC_FILES serialize.cpp serialize.h trajectory.cpp trajectory.h stats.h)
 add_library(lib ${SRC_FILES})
diff --git a/lib/serialize.cpp b/lib/serialize.cpp
index 1cdb91f..707ee7e 100644
--- a/lib/serialize.cpp
+++ b/lib/serialize.cpp
@@ -1,10 +1,9 @@
-#include "serialize.h"
-
 #include <iostream>
 #include <fstream>
-
 #include <filesystem>
 
+#include "serialize.h"
+
 std::istream& operator >> (std::istream& in, TimePoint& tp)
 {
 	in >> tp.x;
diff --git a/lib/serialize.h b/lib/serialize.h
index bd4cc1f..cbe857d 100644
--- a/lib/serialize.h
+++ b/lib/serialize.h
@@ -1,8 +1,12 @@
+// ===============================================================
+// Serialization/load functions
+// ===============================================================
+
 #pragma once
 
 #include <string>
 
-#include "Trajectory.h"
+#include "trajectory.h"
 
 std::istream& operator >> (std::istream& in, TimePoint& tp);
 std::ostream& operator << (std::ostream& out, const TimePoint& tp);
@@ -14,5 +18,8 @@ std::istream& operator >> (std::istream& in, TrajectoryStorage& t);
 
 std::ostream& operator << (std::ostream& out, const TPointsPath& p);
 
+//Load trajectories from file set in <filename>
 TrajectoryStorage load(const std::string& filename);
+
+//Load trajectories from file or directory set in <path>
 TrajectoryStorage loadDB(const std::string& path);
diff --git a/lib/stats.h b/lib/stats.h
index 00d38a7..8163359 100644
--- a/lib/stats.h
+++ b/lib/stats.h
@@ -1,21 +1,25 @@
-#pragma once
+// =====================================================================================================
+// Search complexity : O(N* log(outputSize))
+// where N - number of trajectories
+// log(outputSize) comes from the fact that each topList.insert() is log(outputSize)
+//
+// Function topMatches can be easily extended to be used with different types of containers and metrics
+// =====================================================================================================
 
-#include "Trajectory.h"
+#pragma once
 
 #include <map>
 #include <cmath>
 
+#include "Trajectory.h"
+
 namespace stats {
 	template <class M>
 	using TrajectoryView = std::vector<std::pair<M, const Trajectory*>>;
 
-	//Search complexity: O(N*log(outputSize)),
-	//where N - number of trajectories
-	//log(outputSize) comes from the fact that each topList.insert() is log(outputSize)
-
 	template <typename F>
-	auto topMatches(const Trajectory& refer, const TrajectoryStorage& storage, F metrics, unsigned outputSize) {
-		const auto refererValue = metrics(refer);
+	auto topMatches(const Trajectory& referer, const TrajectoryStorage& storage, F metrics, unsigned outputSize) {
+		const auto refererValue = metrics(referer);
 
 		using MType = std::decay_t<decltype(refererValue)>;
 		std::multimap<MType, const Trajectory*> topList;
diff --git a/lib/trajectory.cpp b/lib/trajectory.cpp
index 6ba9063..71d1b87 100644
--- a/lib/trajectory.cpp
+++ b/lib/trajectory.cpp
@@ -1,9 +1,8 @@
-#include "Trajectory.h"
-
-#include <stdexcept>
 #include <algorithm>
 #include <cmath>
 
+#include "trajectory.h"
+
 
 Trajectory::Trajectory(TPointsPath&& p)
 	: path_{ std::move(p) }
diff --git a/lib/trajectory.h b/lib/trajectory.h
index 3e91bf0..ed31a17 100644
--- a/lib/trajectory.h
+++ b/lib/trajectory.h
@@ -1,7 +1,15 @@
+// ==================================================================================
+// Class Trajectory is responsible for 
+// storing data and handling operations with trajectories
+// 
+// The only way to build a valid Trajectory is to use TrajectoryBuilder
+// TrajectoryBuilder's purpose is to create valid Trajectories and handle exceptions
+// ==================================================================================
+
 #pragma once
 
 #include <vector>
-#include <memory>
+#include <iostream>
 #include <cassert>
 
 struct TimePoint
@@ -13,6 +21,7 @@ struct TimePoint
 
 using TPointsPath = std::vector<TimePoint>;
 
+/*Trajectory class is movable only to exclude copies of std::vector*/
 class Trajectory {
 	friend class TrajectoryBuilder;
 	friend std::ostream& operator << (std::ostream& out, const Trajectory& t);
@@ -68,6 +77,7 @@ private:
 	TPointsPath path_;
 };
 
+/*TrajectoryBuilder is the only way to create a valid trajectory*/
 class TrajectoryBuilder {
 public:
 	explicit TrajectoryBuilder(unsigned length)
diff --git a/main.cpp b/main.cpp
index c77290d..cc4add8 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,11 +1,10 @@
-#include "Trajectory.h"
-#include "serialize.h"
-#include "stats.h"
-
-#include <iostream>
 #include <filesystem>
 #include <functional>
 
+#include "trajectory.h"
+#include "serialize.h"
+#include "stats.h"
+
 constexpr unsigned NEAREST_GROUP_SIZE = 3;
 
 int main(int argc, const char** argv)
@@ -81,4 +80,3 @@ int main(int argc, const char** argv)
 
 	return 0;
 }
-
